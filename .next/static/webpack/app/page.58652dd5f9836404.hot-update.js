"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/tmdb.ts":
/*!*********************!*\
  !*** ./lib/tmdb.ts ***!
  \*********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDiscoverMovies: function() { return /* binding */ getDiscoverMovies; },\n/* harmony export */   getGenres: function() { return /* binding */ getGenres; }\n/* harmony export */ });\n// For home page with sorting/filtering\nconst getDiscoverMovies = async function() {\n    let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, sortBy = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"popularity.desc\", genre = arguments.length > 2 ? arguments[2] : void 0;\n    try {\n        let url = \"\".concat(BASE_URL, \"/discover/movie?api_key=\").concat(API_KEY, \"&page=\").concat(page, \"&sort_by=\").concat(sortBy);\n        if (genre) url += \"&with_genres=\".concat(genre);\n        const data = await fetchWithErrorHandling(url);\n        return data.results || [];\n    } catch (error) {\n        console.error(\"Error fetching movies:\", error);\n        return [];\n    }\n};\nconst getGenres = async ()=>{\n    try {\n        const data = await fetchWithErrorHandling(\"\".concat(BASE_URL, \"/genre/movie/list?api_key=\").concat(API_KEY));\n        return data.genres || [];\n    } catch (error) {\n        console.error(\"Error fetching genres:\", error);\n        return [];\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi90bWRiLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsdUNBQXVDO0FBQ2hDLE1BQU1BLG9CQUFvQjtRQUFPQyx3RUFBZSxHQUFHQywwRUFBaUIsbUJBQW1CQztJQUM1RixJQUFJO1FBQ0YsSUFBSUMsTUFBTSxHQUFzQ0MsT0FBbkNDLFVBQVMsNEJBQTBDTCxPQUFoQkksU0FBUSxVQUF3QkgsT0FBaEJELE1BQUssYUFBa0IsT0FBUEM7UUFDaEYsSUFBSUMsT0FBT0MsT0FBTyxnQkFBc0IsT0FBTkQ7UUFFbEMsTUFBTUksT0FBTyxNQUFNQyx1QkFBdUJKO1FBQzFDLE9BQU9HLEtBQUtFLE9BQU8sSUFBSSxFQUFFO0lBQzNCLEVBQUUsT0FBT0MsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsMEJBQTBCQTtRQUN4QyxPQUFPLEVBQUU7SUFDWDtBQUNGLEVBQUM7QUFFTSxNQUFNRSxZQUFZO0lBQ3ZCLElBQUk7UUFDRixNQUFNTCxPQUFPLE1BQU1DLHVCQUF1QixHQUF3Q0gsT0FBckNDLFVBQVMsOEJBQW9DLE9BQVJEO1FBQ2xGLE9BQU9FLEtBQUtNLE1BQU0sSUFBSSxFQUFFO0lBQzFCLEVBQUUsT0FBT0gsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsMEJBQTBCQTtRQUN4QyxPQUFPLEVBQUU7SUFDWDtBQUNGLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbGliL3RtZGIudHM/MDI2NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGb3IgaG9tZSBwYWdlIHdpdGggc29ydGluZy9maWx0ZXJpbmdcbmV4cG9ydCBjb25zdCBnZXREaXNjb3Zlck1vdmllcyA9IGFzeW5jIChwYWdlOiBudW1iZXIgPSAxLCBzb3J0Qnk6IHN0cmluZyA9ICdwb3B1bGFyaXR5LmRlc2MnLCBnZW5yZT86IHN0cmluZykgPT4ge1xuICB0cnkge1xuICAgIGxldCB1cmwgPSBgJHtCQVNFX1VSTH0vZGlzY292ZXIvbW92aWU/YXBpX2tleT0ke0FQSV9LRVl9JnBhZ2U9JHtwYWdlfSZzb3J0X2J5PSR7c29ydEJ5fWBcbiAgICBpZiAoZ2VucmUpIHVybCArPSBgJndpdGhfZ2VucmVzPSR7Z2VucmV9YFxuICAgIFxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBmZXRjaFdpdGhFcnJvckhhbmRsaW5nKHVybClcbiAgICByZXR1cm4gZGF0YS5yZXN1bHRzIHx8IFtdXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgbW92aWVzOicsIGVycm9yKVxuICAgIHJldHVybiBbXVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBnZXRHZW5yZXMgPSBhc3luYyAoKTogUHJvbWlzZTxHZW5yZVtdPiA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IGZldGNoV2l0aEVycm9ySGFuZGxpbmcoYCR7QkFTRV9VUkx9L2dlbnJlL21vdmllL2xpc3Q/YXBpX2tleT0ke0FQSV9LRVl9YClcbiAgICByZXR1cm4gZGF0YS5nZW5yZXMgfHwgW11cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBnZW5yZXM6JywgZXJyb3IpXG4gICAgcmV0dXJuIFtdXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJnZXREaXNjb3Zlck1vdmllcyIsInBhZ2UiLCJzb3J0QnkiLCJnZW5yZSIsInVybCIsIkFQSV9LRVkiLCJCQVNFX1VSTCIsImRhdGEiLCJmZXRjaFdpdGhFcnJvckhhbmRsaW5nIiwicmVzdWx0cyIsImVycm9yIiwiY29uc29sZSIsImdldEdlbnJlcyIsImdlbnJlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/tmdb.ts\n"));

/***/ })

});